{"version":3,"sources":["pages/index.jsx","pages/musicContext.jsx","pages/playing.jsx","pages/playlist.jsx","pages/musicProvider.jsx","App.js","serviceWorker.js","index.js"],"names":["HomePage","style","gaya","textAlign","CounterContext","createContext","count","artistName","albumId","previewURL","artistId","albumName","name","id","useStyles","makeStyles","theme","root","maxWidth","marginBottom","media","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","Playing","React","useContext","classes","setCount","Card","className","ReactWebMediaPlayer","title","audio","thumbnail","avatar","backgroundColor","red","ListMusic","lists","map","list","index","key","CardHeader","CardMedia","image","CardActions","disableSpacing","Button","variant","color","onClick","HandleSelect","component","Link","to","PlayList","useState","SetLists","useEffect","fetch","then","response","json","result","countries","tracks","i","newItem","prevList","CounterProvider","children","initialSong","Provider","value","App","flexGrow","position","bottom","width","paper","padding","spacing","background","setValue","Grid","container","item","xs","Paper","path","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","label","icon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f6b2684.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst HomePage = () => {\r\n\r\n    const gaya = {\r\n        textAlign: 'center',\r\n        \r\n    };\r\n\r\n    return (\r\n    <>\r\n   <h1 style={{gaya}}>Welcome mblo!</h1>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default HomePage;","import React, { createContext } from 'react';\r\nconst CounterContext = createContext({\r\n   count: {\r\n        artistName : '',\r\n        albumId : '',\r\n        previewURL : '',\r\n        artistId : '',\r\n        albumName : '',\r\n        name : '',\r\n        id:''\r\n      }\r\n})\r\n\r\nexport default CounterContext","import React, {useState, useEffect, useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CounterContext from './musicContext';\r\nimport ReactWebMediaPlayer from 'react-web-media-player';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      maxWidth: 345,\r\n      marginBottom: '10px'\r\n    },\r\n    media: {\r\n      paddingTop: '30%', // 16:9\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n     \r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n\r\n  }));\r\n\r\n\r\nconst Playing = () => {\r\n    const { count, setCount } = React.useContext(CounterContext);\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <div>\r\n         {(count.id === '') && (<><h1>Pilih Musik kesukaan mu!</h1></>)}\r\n         {(count.id !== '') && (\r\n        \r\n        <>\r\n\r\n        <h1>\r\n            Current playing...    \r\n        </h1>\r\n\r\n        \r\n        <Card className={classes.root} >\r\n          \r\n        <ReactWebMediaPlayer className={classes.media}\r\n        title={count.name}\r\n        audio={count.previewURL}\r\n        thumbnail={'http://direct.rhapsody.com/imageserver/v2/albums/'+count.albumId+'/images/300x300.jpg'}\r\n        />\r\n\r\n         \r\n        </Card>\r\n\r\n        </>\r\n\r\n         )}\r\n        </div>\r\n      );\r\n   \r\n  };\r\n\r\n  export default Playing;","import React, {useState, useEffect, useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport PlayCircleFilled from '@material-ui/icons/PlayCircleFilled';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nimport Playing from './playing';\r\nimport CounterContext from './musicContext';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      maxWidth: 345,\r\n      marginBottom: '10px'\r\n    },\r\n    media: {\r\n      paddingTop: '30%', // 16:9\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n     \r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n      backgroundColor: red[500],\r\n    },\r\n  }));\r\n\r\n\r\n  \r\n\r\n  \r\n  \r\n  const ListMusic = ({lists}) => {\r\n      const {count, setCount } = useContext(CounterContext);\r\n      \r\n      const HandleSelect = ({artistName,albumId,previewURL,artistId,albumName,name,id}) => {\r\n          setCount({\r\n          artistName,albumId,previewURL,artistId,albumName,name,id\r\n          });\r\n    \r\n   \r\n    \r\n      }\r\n    const classes = useStyles();\r\n\r\n    return lists.map((list, index) => (\r\n        <Card className={classes.root} key={index}>\r\n          <CardHeader\r\n            title={list.name} \r\n          />\r\n          <CardMedia\r\n            className={classes.media}\r\n            image={'http://direct.rhapsody.com/imageserver/v2/albums/'+list.albumId+'/images/300x300.jpg'}\r\n            title=\"Paella dish\"\r\n          />\r\n          <CardActions disableSpacing>\r\n           \r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => HandleSelect(list)} component={Link} to=\"/about\" > Play <PlayCircleFilled /> </Button>\r\n            &nbsp; Artis : {list.artistName}      \r\n          \r\n          </CardActions>\r\n         \r\n        </Card>\r\n      ));\r\n  }\r\n\r\nconst PlayList = () => {\r\n\r\n   \r\n    const [expanded, setExpanded] = React.useState(false);\r\n  \r\n    const handleExpandClick = () => {\r\n      setExpanded(!expanded);\r\n    };\r\n\r\n    const [lists, SetLists] = React.useState([]);\r\n    \r\n    React.useEffect(() => {\r\n      const url = 'https://api.napster.com/v2.1/tracks/top?apikey=ZTk2YjY4MjMtMDAzYy00MTg4LWE2MjYtZDIzNjJmMmM0YTdm';\r\n  \r\n      fetch(url).then(response => response.json()).then(result => {\r\n      const countries = result.tracks;\r\n      for(let i=0; i < 5; i++ ){\r\n  \r\n         const newItem = {\r\n            artistName : countries[i].artistName,\r\n            albumId : countries[i].albumId,\r\n            previewURL : countries[i].previewURL,\r\n            artistId : countries[i].artistId,\r\n            albumName : countries[i].albumName,\r\n            name : countries[i].name,\r\n            id : countries[i].id,\r\n         }\r\n         SetLists(prevList =>[...prevList, newItem]);\r\n       }\r\n      })\r\n  \r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n    <ListMusic lists={lists}/>\r\n        </>\r\n      )\r\n    \r\n      \r\n}\r\n\r\nexport default PlayList;","import React, { useState } from 'react';\r\nimport CounterContext from './musicContext';\r\n\r\nconst CounterProvider = ({ children, initialSong }) => {\r\n  const [count, setCount] = React.useState(initialSong);\r\n  return (\r\n    <CounterContext.Provider value={{ count, setCount }}>\r\n      {children}\r\n    </CounterContext.Provider>\r\n  )\r\n}\r\n\r\nexport default CounterProvider;","\nimport React, {useState, useEffect} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport HomePage from './pages/index';\nimport PlayList from './pages/playlist';\nimport Playing from './pages/playing';\nimport CounterProvider from './pages/musicProvider';\n\nexport default function App() {\n  const initialState = {\n    artistName : '',\n    albumId : '',\n    previewURL : '',\n    artistId : '',\n    albumName : '',\n    name : '',\n    id:''\n  }\n  \n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      position: 'fixed',\n      bottom: 0,\n      width: '100%',\n     \n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: '#000000',\n      background: '#C0C0C0',\n    },\n    \n  }));\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  \n\n\n  return (\n    <CounterProvider initialSong={initialState} >\n    <Router>\n         \n\n      <Grid container spacing={0}>\n        <Grid item xs={12}>\n        <Paper className={classes.paper}>\n          <Switch>\n            <Route path=\"/about\">\n              <Playing />\n            </Route>\n            <Route path=\"/users\">\n              <PlayList />\n            </Route>\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </Paper>\n\n        </Grid>\n        \n        <Grid item xs={12}>\n      <BottomNavigation\n          value={value}\n          onChange={(event, newValue) => {\n            setValue(newValue);\n          }}\n          showLabels\n          className={classes.root}\n          \n      >\n     \n      <BottomNavigationAction component={Link} label=\"Home\" icon={<RestoreIcon />} to=\"/\" />\n      <BottomNavigationAction component={Link} label=\"Playing\" icon={<FavoriteIcon />} to=\"/about\" />\n      <BottomNavigationAction component={Link} label=\"Playlist\" icon={<LocationOnIcon />} to=\"/users\" />\n      </BottomNavigation>\n        </Grid>\n      </Grid>\n      \n  \n      \n    \n    </Router>\n    </CounterProvider>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}